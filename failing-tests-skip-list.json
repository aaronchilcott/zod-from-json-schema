[
    "additionalProperties|additionalProperties being false does not allow other properties|an additional property is invalid",
    "additionalProperties|additionalProperties being false does not allow other properties|patternProperties are not additional properties",
    "additionalProperties|additionalProperties can exist by itself|an additional invalid property is invalid",
    "additionalProperties|additionalProperties does not look in applicators|properties defined in allOf are not examined",
    "additionalProperties|additionalProperties with propertyNames|Valid against propertyNames, but not additionalProperties",
    "additionalProperties|additionalProperties with schema|an additional invalid property is invalid",
    "additionalProperties|dependentSchemas with additionalProperties|additionalProperties can't see bar",
    "additionalProperties|dependentSchemas with additionalProperties|additionalProperties can't see bar even when foo2 is present",
    "additionalProperties|dependentSchemas with additionalProperties|additionalProperties doesn't consider dependentSchemas",
    "additionalProperties|non-ASCII pattern with additionalProperties|not matching the pattern is invalid",
    "allOf|allOf combined with anyOf, oneOf|allOf: true, anyOf: true, oneOf: true",
    "allOf|allOf simple types|valid",
    "allOf|allOf with base schema|mismatch base schema",
    "allOf|allOf with base schema|mismatch both",
    "allOf|allOf with base schema|mismatch first allOf",
    "allOf|allOf with base schema|mismatch second allOf",
    "allOf|allOf with boolean schemas, all true|any value is valid",
    "allOf|allOf with one empty schema|any data is valid",
    "allOf|allOf with the first empty schema|number is valid",
    "allOf|allOf with the last empty schema|number is valid",
    "allOf|allOf with two empty schemas|any data is valid",
    "allOf|allOf|mismatch first",
    "allOf|allOf|mismatch second",
    "allOf|allOf|wrong type",
    "allOf|nested allOf, to check validation semantics|null is valid",
    "anchor|Location-independent identifier with absolute URI|mismatch",
    "anchor|Location-independent identifier with base URI change in subschema|mismatch",
    "anchor|Location-independent identifier|mismatch",
    "anchor|same $anchor with different base uri|$ref does not resolve to /$defs/A/allOf/0",
    "anyOf|anyOf complex types|neither anyOf valid (complex)",
    "anyOf|anyOf with base schema|both anyOf invalid",
    "anyOf|anyOf with boolean schemas, all false|any value is invalid",
    "anyOf|anyOf|neither anyOf valid",
    "anyOf|nested anyOf, to check validation semantics|anything non-null is invalid",
    "boolean_schema|boolean schema 'false'|array is invalid",
    "boolean_schema|boolean schema 'false'|boolean false is invalid",
    "boolean_schema|boolean schema 'false'|boolean true is invalid",
    "boolean_schema|boolean schema 'false'|empty array is invalid",
    "boolean_schema|boolean schema 'false'|empty object is invalid",
    "boolean_schema|boolean schema 'false'|null is invalid",
    "boolean_schema|boolean schema 'false'|number is invalid",
    "boolean_schema|boolean schema 'false'|object is invalid",
    "boolean_schema|boolean schema 'false'|string is invalid",
    "const|const with [false] does not match [0]|[false] is valid",
    "const|const with [true] does not match [1]|[true] is valid",
    "const|const with array|same array is valid",
    "const|const with object|same object is valid",
    "const|const with object|same object with different property order is valid",
    "const|const with {\"a\": false} does not match {\"a\": 0}|{\"a\": false} is valid",
    "const|const with {\"a\": true} does not match {\"a\": 1}|{\"a\": true} is valid",
    "contains|contains keyword validation|array without items matching schema is invalid",
    "contains|contains keyword validation|empty array is invalid",
    "contains|contains keyword with boolean schema false|any non-empty array is invalid",
    "contains|contains keyword with boolean schema false|empty array is invalid",
    "contains|contains keyword with boolean schema true|empty array is invalid",
    "contains|contains keyword with const keyword|array without item 5 is invalid",
    "contains|contains with false if subschema|empty array is invalid",
    "contains|items + contains|does not match items, matches contains",
    "contains|items + contains|matches items, does not match contains",
    "contains|items + contains|matches neither items nor contains",
    "defs|validate definition against metaschema|invalid definition schema",
    "dependentRequired|dependencies with escaped characters|CRLF missing dependent",
    "dependentRequired|dependencies with escaped characters|quoted quotes missing dependent",
    "dependentRequired|multiple dependents required|missing both dependencies",
    "dependentRequired|multiple dependents required|missing dependency",
    "dependentRequired|multiple dependents required|missing other dependency",
    "dependentRequired|single dependency|missing dependency",
    "dependentSchemas|boolean subschemas|object with both properties is invalid",
    "dependentSchemas|boolean subschemas|object with property having schema false is invalid",
    "dependentSchemas|dependencies with escaped characters|quoted quote",
    "dependentSchemas|dependencies with escaped characters|quoted quote invalid under dependent schema",
    "dependentSchemas|dependencies with escaped characters|quoted tab invalid under dependent schema",
    "dependentSchemas|dependent subschema incompatible with root|matches both",
    "dependentSchemas|dependent subschema incompatible with root|matches root",
    "dependentSchemas|single dependency|wrong type",
    "dependentSchemas|single dependency|wrong type both",
    "dependentSchemas|single dependency|wrong type other",
    "dynamicRef|$dynamicRef points to a boolean schema|follow $dynamicRef to a false schema",
    "dynamicRef|$dynamicRef skips over intermediate resources - direct reference|string property fails",
    "dynamicRef|$ref and $dynamicAnchor are independent of order - $defs first|incorrect extended schema",
    "dynamicRef|$ref and $dynamicAnchor are independent of order - $defs first|incorrect parent schema",
    "dynamicRef|$ref and $dynamicAnchor are independent of order - $ref first|incorrect extended schema",
    "dynamicRef|$ref and $dynamicAnchor are independent of order - $ref first|incorrect parent schema",
    "dynamicRef|$ref to $dynamicRef finds detached $dynamicAnchor|non-number is invalid",
    "dynamicRef|A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated|An array containing non-strings is invalid",
    "dynamicRef|A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope|The recursive part is not valid against the root",
    "dynamicRef|A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor|An array containing non-strings is invalid",
    "dynamicRef|A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor|An array containing non-strings is invalid",
    "dynamicRef|A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution|An array containing non-strings is invalid",
    "dynamicRef|A $dynamicRef without anchor in fragment behaves identical to $ref|An array of strings is invalid",
    "dynamicRef|A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor|An array containing non-strings is invalid",
    "dynamicRef|after leaving a dynamic scope, it is not used by a $dynamicRef|first_scope is not in dynamic scope for the $dynamicRef",
    "dynamicRef|after leaving a dynamic scope, it is not used by a $dynamicRef|string matches /$defs/thingy, but the $dynamicRef does not stop here",
    "dynamicRef|multiple dynamic paths to the $dynamicRef keyword|number list with string values",
    "dynamicRef|multiple dynamic paths to the $dynamicRef keyword|string list with number values",
    "dynamicRef|strict-tree schema, guards against misspelled properties|instance with misspelled field",
    "dynamicRef|tests for implementation dynamic anchor and reference link|incorrect extended schema",
    "dynamicRef|tests for implementation dynamic anchor and reference link|incorrect parent schema",
    "enum|enum with [0] does not match [false]|[0.0] is valid",
    "enum|enum with [0] does not match [false]|[0] is valid",
    "enum|enum with [1] does not match [true]|[1.0] is valid",
    "enum|enum with [1] does not match [true]|[1] is valid",
    "enum|enum with [false] does not match [0]|[false] is valid",
    "enum|enum with [true] does not match [1]|[true] is valid",
    "enum|heterogeneous enum validation|one of the enum is valid",
    "enum|heterogeneous enum validation|valid object matches",
    "exclusiveMaximum|exclusiveMaximum validation|above the exclusiveMaximum is invalid",
    "exclusiveMaximum|exclusiveMaximum validation|boundary point is invalid",
    "exclusiveMinimum|exclusiveMinimum validation|below the exclusiveMinimum is invalid",
    "exclusiveMinimum|exclusiveMinimum validation|boundary point is invalid",
    "if-then-else|if and else without then|invalid through else",
    "if-then-else|if and then without else|invalid through then",
    "if-then-else|if appears at the end when serialized (keyword processing sequence)|invalid redirects to else and fails",
    "if-then-else|if appears at the end when serialized (keyword processing sequence)|no redirects to then and fails",
    "if-then-else|if with boolean schema false|boolean schema false in if always chooses the else path (invalid)",
    "if-then-else|if with boolean schema true|boolean schema true in if always chooses the then path (invalid)",
    "if-then-else|non-interference across combined schemas|valid, but would have been invalid through else",
    "if-then-else|non-interference across combined schemas|valid, but would have been invalid through then",
    "if-then-else|validate against correct branch, then vs else|invalid through else",
    "if-then-else|validate against correct branch, then vs else|invalid through then",
    "infinite-loop-detection|evaluating the same schema location against the same data location twice is not a sign of an infinite loop|failing case",
    "items|a schema given for items|wrong type of items",
    "items|items and subitems|too many sub-items",
    "items|items and subitems|wrong item",
    "items|items and subitems|wrong sub-item",
    "items|items does not look in applicators, valid case|prefixItems in allOf does not constrain items, invalid case",
    "items|items does not look in applicators, valid case|prefixItems in allOf does not constrain items, valid case",
    "items|items with boolean schema (false)|any non-empty array is invalid",
    "items|items with heterogeneous array|heterogeneous invalid instance",
    "items|prefixItems validation adjusts the starting index for items|wrong type of second item",
    "items|prefixItems with no additional items allowed|additional items are not permitted",
    "maxContains|maxContains with contains, value with a decimal|too many elements match, invalid maxContains",
    "maxContains|maxContains with contains|all elements match, invalid maxContains",
    "maxContains|maxContains with contains|empty data",
    "maxContains|maxContains with contains|some elements match, invalid maxContains",
    "maxContains|minContains < maxContains|actual < minContains < maxContains",
    "maxContains|minContains < maxContains|minContains < maxContains < actual",
    "maxItems|maxItems validation with a decimal|too long is invalid",
    "maxItems|maxItems validation|too long is invalid",
    "maxLength|maxLength validation with a decimal|too long is invalid",
    "maxLength|maxLength validation|too long is invalid",
    "maxProperties|maxProperties = 0 means the object is empty|one property is invalid",
    "maxProperties|maxProperties validation with a decimal|too long is invalid",
    "maxProperties|maxProperties validation|too long is invalid",
    "maximum|maximum validation with unsigned integer|above the maximum is invalid",
    "maximum|maximum validation|above the maximum is invalid",
    "minContains|maxContains < minContains|empty data",
    "minContains|maxContains < minContains|invalid maxContains",
    "minContains|maxContains < minContains|invalid maxContains and minContains",
    "minContains|maxContains < minContains|invalid minContains",
    "minContains|maxContains = minContains|all elements match, invalid maxContains",
    "minContains|maxContains = minContains|all elements match, invalid minContains",
    "minContains|maxContains = minContains|empty data",
    "minContains|minContains = 0 with maxContains|too many",
    "minContains|minContains=1 with contains|empty data",
    "minContains|minContains=1 with contains|no elements match",
    "minContains|minContains=2 with contains with a decimal value|one element matches, invalid minContains",
    "minContains|minContains=2 with contains|all elements match, invalid minContains",
    "minContains|minContains=2 with contains|empty data",
    "minContains|minContains=2 with contains|some elements match, invalid minContains",
    "minItems|minItems validation with a decimal|too short is invalid",
    "minItems|minItems validation|too short is invalid",
    "minLength|minLength validation with a decimal|too short is invalid",
    "minLength|minLength validation|one grapheme is not long enough",
    "minLength|minLength validation|too short is invalid",
    "minProperties|minProperties validation with a decimal|too short is invalid",
    "minProperties|minProperties validation|too short is invalid",
    "minimum|minimum validation with signed integer|float below the minimum is invalid",
    "minimum|minimum validation with signed integer|int below the minimum is invalid",
    "minimum|minimum validation|below the minimum is invalid",
    "multipleOf|by int|int by int fail",
    "multipleOf|by number|35 is not multiple of 1.5",
    "multipleOf|by small number|0.00751 is not multiple of 0.0001",
    "multipleOf|small multiple of large integer|any integer is a multiple of 1e-8",
    "not|collect annotations inside a 'not', even if collection is disabled|unevaluated property",
    "not|forbidden property|property present",
    "not|not multiple types|valid",
    "oneOf|nested oneOf, to check validation semantics|anything non-null is invalid",
    "oneOf|oneOf complex types|both oneOf valid (complex)",
    "oneOf|oneOf complex types|neither oneOf valid (complex)",
    "oneOf|oneOf with base schema|both oneOf valid",
    "oneOf|oneOf with boolean schemas, all false|any value is invalid",
    "oneOf|oneOf with boolean schemas, all true|any value is invalid",
    "oneOf|oneOf with boolean schemas, more than one true|any value is invalid",
    "oneOf|oneOf with empty schema|both valid - invalid",
    "oneOf|oneOf with missing optional property|both oneOf valid",
    "oneOf|oneOf with missing optional property|neither oneOf valid",
    "oneOf|oneOf with required|both invalid - invalid",
    "oneOf|oneOf with required|both valid - invalid",
    "oneOf|oneOf|both oneOf valid",
    "oneOf|oneOf|neither oneOf valid",
    "patternProperties|multiple simultaneous patternProperties are validated|an invalid due to both is invalid",
    "patternProperties|multiple simultaneous patternProperties are validated|an invalid due to one is invalid",
    "patternProperties|multiple simultaneous patternProperties are validated|an invalid due to the other is invalid",
    "patternProperties|patternProperties validates properties matching a regex|a single invalid match is invalid",
    "patternProperties|patternProperties validates properties matching a regex|multiple invalid matches is invalid",
    "patternProperties|patternProperties with boolean schemas|object with a property matching both true and false is invalid",
    "patternProperties|patternProperties with boolean schemas|object with both properties is invalid",
    "patternProperties|patternProperties with boolean schemas|object with property matching schema false is invalid",
    "patternProperties|regexes are not anchored by default and are case sensitive|recognized members are accounted for",
    "patternProperties|regexes are not anchored by default and are case sensitive|regexes are case sensitive, 2",
    "pattern|pattern validation|a non-matching pattern is invalid",
    "prefixItems|a schema given for prefixItems|wrong types",
    "prefixItems|prefixItems with boolean schemas|array with two items is invalid",
    "properties|object properties validation|both properties invalid is invalid",
    "properties|object properties validation|one property invalid is invalid",
    "properties|properties whose names are Javascript object property names|__proto__ not valid",
    "properties|properties whose names are Javascript object property names|constructor not valid",
    "properties|properties whose names are Javascript object property names|toString not valid",
    "properties|properties with boolean schema|both properties present is invalid",
    "properties|properties with boolean schema|only 'false' property present is invalid",
    "properties|properties with escaped characters|object with strings is invalid",
    "properties|properties, patternProperties, additionalProperties interaction|additionalProperty invalidates others",
    "properties|properties, patternProperties, additionalProperties interaction|patternProperty invalidates nonproperty",
    "properties|properties, patternProperties, additionalProperties interaction|patternProperty invalidates property",
    "properties|properties, patternProperties, additionalProperties interaction|property invalidates property",
    "propertyNames|propertyNames validation with pattern|non-matching property name is invalid",
    "propertyNames|propertyNames validation|some property names invalid",
    "propertyNames|propertyNames with boolean schema false|object with any properties is invalid",
    "propertyNames|propertyNames with const|object with any other property is invalid",
    "propertyNames|propertyNames with enum|object with any other property is invalid",
    "refRemote|$ref to $ref finds detached $anchor|non-number is invalid",
    "refRemote|Location-independent identifier in remote ref|string is invalid",
    "refRemote|anchor within remote ref|remote anchor invalid",
    "refRemote|base URI change - change folder in subschema|string is invalid",
    "refRemote|base URI change - change folder|string is invalid",
    "refRemote|base URI change|base URI change ref invalid",
    "refRemote|fragment within remote ref|remote fragment invalid",
    "refRemote|ref within remote ref|ref within ref invalid",
    "refRemote|remote HTTP ref with different $id|number is invalid",
    "refRemote|remote HTTP ref with different URN $id|number is invalid",
    "refRemote|remote HTTP ref with nested absolute ref|number is invalid",
    "refRemote|remote ref with ref to defs|invalid",
    "refRemote|remote ref|remote ref invalid",
    "refRemote|retrieved nested refs resolve relative to their URI not $id|number is invalid",
    "refRemote|root ref in remote ref|object is invalid",
    "ref|$id must be resolved against nearest parent, not just immediate parent|number is valid",
    "ref|$id with file URI still resolves pointers - *nix|non-number is invalid",
    "ref|$id with file URI still resolves pointers - windows|non-number is invalid",
    "ref|$ref to boolean schema false|any value is invalid",
    "ref|Recursive references between schemas|invalid tree",
    "ref|URN base URI with NSS|a non-string is invalid",
    "ref|URN base URI with URN and JSON pointer ref|a non-string is invalid",
    "ref|URN base URI with URN and anchor ref|a non-string is invalid",
    "ref|URN base URI with q-component|a non-string is invalid",
    "ref|URN base URI with r-component|a non-string is invalid",
    "ref|URN ref with nested pointer ref|a non-string is invalid",
    "ref|empty tokens in $ref json-pointer|number is valid",
    "ref|escaped pointer ref|percent invalid",
    "ref|escaped pointer ref|slash invalid",
    "ref|escaped pointer ref|tilde invalid",
    "ref|naive replacement of $ref with its destination is not correct|match the enum exactly",
    "ref|nested refs|nested ref invalid",
    "ref|order of evaluation: $id and $anchor and $ref|data is invalid against first definition",
    "ref|order of evaluation: $id and $ref|data is invalid against first definition",
    "ref|property named $ref that is not a reference|property named $ref invalid",
    "ref|property named $ref, containing an actual $ref|property named $ref invalid",
    "ref|ref applies alongside sibling keywords|ref invalid",
    "ref|ref applies alongside sibling keywords|ref valid, maxItems invalid",
    "ref|ref creates new scope when adjacent to keywords|referenced subschema doesn't see annotations from properties",
    "ref|ref to else|a non-integer is invalid due to the $ref",
    "ref|ref to if|a non-integer is invalid due to the $ref",
    "ref|ref to then|a non-integer is invalid due to the $ref",
    "ref|ref with absolute-path-reference|an integer is invalid",
    "ref|refs with quote|object with strings is invalid",
    "ref|refs with relative uris and defs|invalid on inner field",
    "ref|refs with relative uris and defs|invalid on outer field",
    "ref|relative pointer ref to array|mismatch array",
    "ref|relative pointer ref to object|mismatch",
    "ref|relative refs with absolute uris and defs|invalid on inner field",
    "ref|relative refs with absolute uris and defs|invalid on outer field",
    "ref|remote ref, containing refs itself|remote ref invalid",
    "ref|root pointer ref|mismatch",
    "ref|root pointer ref|recursive mismatch",
    "ref|simple URN base URI with $ref via the URN|invalid under the URN IDed schema",
    "ref|simple URN base URI with JSON pointer|a non-string is invalid",
    "required|required properties whose names are Javascript object property names|__proto__ present",
    "required|required properties whose names are Javascript object property names|constructor present",
    "required|required properties whose names are Javascript object property names|none of the properties mentioned",
    "required|required properties whose names are Javascript object property names|toString present",
    "required|required validation|non-present required property is invalid",
    "required|required with escaped characters|object with some properties missing is invalid",
    "type|multiple types can be specified in an array|a boolean is invalid",
    "type|multiple types can be specified in an array|a float is invalid",
    "type|multiple types can be specified in an array|an array is invalid",
    "type|multiple types can be specified in an array|an object is invalid",
    "type|multiple types can be specified in an array|null is invalid",
    "type|object type matches objects|an array is not an object",
    "type|type as array with one item|number is invalid",
    "type|type: array or object|null is invalid",
    "type|type: array or object|number is invalid",
    "type|type: array or object|string is invalid",
    "type|type: array, object or null|number is invalid",
    "type|type: array, object or null|string is invalid",
    "unevaluatedItems|item is evaluated in an uncle schema to unevaluatedItems|uncle keyword evaluation is not significant",
    "unevaluatedItems|unevaluatedItems and contains interact to control item dependency relationship|only a's and c's are invalid",
    "unevaluatedItems|unevaluatedItems and contains interact to control item dependency relationship|only b's and c's are invalid",
    "unevaluatedItems|unevaluatedItems and contains interact to control item dependency relationship|only b's are invalid",
    "unevaluatedItems|unevaluatedItems and contains interact to control item dependency relationship|only c's are invalid",
    "unevaluatedItems|unevaluatedItems as schema|with invalid unevaluated items",
    "unevaluatedItems|unevaluatedItems before $ref|with unevaluated items",
    "unevaluatedItems|unevaluatedItems can see annotations from if without then and else|invalid in case if is evaluated",
    "unevaluatedItems|unevaluatedItems can't see inside cousins|always fails",
    "unevaluatedItems|unevaluatedItems depends on adjacent contains|contains fails, second item is not evaluated",
    "unevaluatedItems|unevaluatedItems depends on adjacent contains|contains passes, second item is not evaluated",
    "unevaluatedItems|unevaluatedItems depends on multiple nested contains|5 not evaluated, passes unevaluatedItems",
    "unevaluatedItems|unevaluatedItems depends on multiple nested contains|7 not evaluated, fails unevaluatedItems",
    "unevaluatedItems|unevaluatedItems false|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with $dynamicRef|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with $ref|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with anyOf|when one schema matches and has unevaluated items",
    "unevaluatedItems|unevaluatedItems with anyOf|when two schemas match and has unevaluated items",
    "unevaluatedItems|unevaluatedItems with boolean schemas|with no unevaluated items",
    "unevaluatedItems|unevaluatedItems with boolean schemas|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with if/then/else|when if doesn't match and it has unevaluated items",
    "unevaluatedItems|unevaluatedItems with if/then/else|when if matches and it has unevaluated items",
    "unevaluatedItems|unevaluatedItems with items|invalid under items",
    "unevaluatedItems|unevaluatedItems with nested items|with invalid additional item",
    "unevaluatedItems|unevaluatedItems with nested prefixItems and items|with additional items",
    "unevaluatedItems|unevaluatedItems with nested prefixItems and items|with no additional items",
    "unevaluatedItems|unevaluatedItems with nested tuple|with no unevaluated items",
    "unevaluatedItems|unevaluatedItems with nested tuple|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with nested unevaluatedItems|with additional items",
    "unevaluatedItems|unevaluatedItems with nested unevaluatedItems|with no additional items",
    "unevaluatedItems|unevaluatedItems with not|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with oneOf|with unevaluated items",
    "unevaluatedItems|unevaluatedItems with tuple|with unevaluated items",
    "unevaluatedProperties|cousin unevaluatedProperties, true and false, false with properties|with nested unevaluated properties",
    "unevaluatedProperties|cousin unevaluatedProperties, true and false, true with properties|with nested unevaluated properties",
    "unevaluatedProperties|cousin unevaluatedProperties, true and false, true with properties|with no nested unevaluated properties",
    "unevaluatedProperties|dependentSchemas with unevaluatedProperties|unevaluatedProperties doesn't consider dependentSchemas",
    "unevaluatedProperties|dependentSchemas with unevaluatedProperties|unevaluatedProperties doesn't see bar when foo2 is absent",
    "unevaluatedProperties|dynamic evalation inside nested refs|Empty is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|a + b is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|a + c is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|a + d is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|all + a is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|b + c is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|b + d is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|c + d is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|xx + a is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|xx + b is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|xx + c is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|xx + d is invalid",
    "unevaluatedProperties|dynamic evalation inside nested refs|xx + foo is invalid",
    "unevaluatedProperties|in-place applicator siblings, allOf has unevaluated|base case: both properties present",
    "unevaluatedProperties|in-place applicator siblings, allOf has unevaluated|in place applicator siblings, foo is missing",
    "unevaluatedProperties|in-place applicator siblings, anyOf has unevaluated|base case: both properties present",
    "unevaluatedProperties|in-place applicator siblings, anyOf has unevaluated|in place applicator siblings, bar is missing",
    "unevaluatedProperties|nested unevaluatedProperties, outer true, inner false, properties inside|with nested unevaluated properties",
    "unevaluatedProperties|nested unevaluatedProperties, outer true, inner false, properties outside|with nested unevaluated properties",
    "unevaluatedProperties|nested unevaluatedProperties, outer true, inner false, properties outside|with no nested unevaluated properties",
    "unevaluatedProperties|property is evaluated in an uncle schema to unevaluatedProperties|uncle keyword evaluation is not significant",
    "unevaluatedProperties|unevaluatedProperties + ref inside allOf / oneOf|Empty is invalid (no x or y)",
    "unevaluatedProperties|unevaluatedProperties + ref inside allOf / oneOf|a and b and x and y are invalid",
    "unevaluatedProperties|unevaluatedProperties + ref inside allOf / oneOf|a and b are invalid (no x or y)",
    "unevaluatedProperties|unevaluatedProperties + ref inside allOf / oneOf|x and y are invalid",
    "unevaluatedProperties|unevaluatedProperties + single cyclic ref|Unevaluated on 1st level is invalid",
    "unevaluatedProperties|unevaluatedProperties + single cyclic ref|Unevaluated on 2nd level is invalid",
    "unevaluatedProperties|unevaluatedProperties + single cyclic ref|Unevaluated on 3rd level is invalid",
    "unevaluatedProperties|unevaluatedProperties before $ref|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties can see annotations from if without then and else|invalid in case if is evaluated",
    "unevaluatedProperties|unevaluatedProperties can't see inside cousins (reverse order)|always fails",
    "unevaluatedProperties|unevaluatedProperties can't see inside cousins|always fails",
    "unevaluatedProperties|unevaluatedProperties false|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties not affected by propertyNames|string property is invalid",
    "unevaluatedProperties|unevaluatedProperties schema|with invalid unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with $dynamicRef|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with $ref|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with adjacent non-bool additionalProperties|with invalid additional properties",
    "unevaluatedProperties|unevaluatedProperties with adjacent patternProperties|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with adjacent properties|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with anyOf|when one matches and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with anyOf|when two match and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with boolean schemas|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with dependentSchemas|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, else not defined|when if is false and has no unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, else not defined|when if is false and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, else not defined|when if is true and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, then not defined|when if is false and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, then not defined|when if is true and has no unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else, then not defined|when if is true and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else|when if is false and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with if/then/else|when if is true and has unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with nested patternProperties|with additional properties",
    "unevaluatedProperties|unevaluatedProperties with nested properties|with additional properties",
    "unevaluatedProperties|unevaluatedProperties with not|with unevaluated properties",
    "unevaluatedProperties|unevaluatedProperties with oneOf|with unevaluated properties",
    "vocabulary|schema that uses custom metaschema with with no validation vocabulary|applicator vocabulary still works"
]
